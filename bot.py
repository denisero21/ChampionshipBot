from aiogram import Bot, Dispatcher, executor, types
import config
import asyncpg


USER = config.USER
PASSWORD = config.PASSWORD
DB = config.DB
HOST = config.HOST

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


# markups

main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
seasons = types.KeyboardButton('–°–µ–∑–æ–Ω—ã')
players = types.KeyboardButton('–ò–≥—Ä–æ–∫–∏')
cards = types.KeyboardButton('–ö–∞—Ä—Ç–æ—á–∫–∏')
games = types.KeyboardButton('–ò–≥—Ä—ã')
stickers = types.KeyboardButton('–°—Ç–∏–∫–µ—Ä—ã')
main_markup.add(seasons, players, cards, games, stickers)


seasons_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
shpl16 = types.KeyboardButton('–®–ü–õ16')
shpl17 = types.KeyboardButton('–®–ü–õ17')
shpl4 = types.KeyboardButton('–®–ü–õ4')
bhshpl = types.KeyboardButton('–ë–•–®–ü–õ')
bhshpl1 = types.KeyboardButton('–ë–•–®–ü–õ1')
back = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
seasons_markup.add(shpl16, shpl17, shpl4, bhshpl, bhshpl1, back)

def set_season(champ_str: str, cup_str: str, top_str:str):
    season_markup = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=2)
    champ = types.InlineKeyboardButton('–ß–µ–º–ø–∏–æ–Ω–∞—Ç', callback_data=f'{champ_str}')
    cup = types.InlineKeyboardButton('–ö—É–±–æ–∫', callback_data=f'{cup_str}')
    top = types.InlineKeyboardButton('–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', callback_data=f'{top_str}')
    season_markup.add(champ, cup, top)
    return season_markup

async def get_players():
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    players_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    rows_names = []
    for i in range(1,48):
        rows_names.append(await db_connect.fetchrow('select name from player where id = $1', i))
    rows_names = list(set(rows_names))
    rows_players = [] 
    for i in rows_names:
        rows_players.append(await db_connect.fetchrow('SELECT player.name, COUNT(goal.player_id) as goals'+
            ' FROM player'+
            ' LEFT JOIN goal ON player.id = goal.player_id where player.name = $1'+
            ' GROUP BY player.name'+
            ' ORDER BY goals DESC', i['name']))
    rows_players = list(set(rows_players))
    rows_players.sort(key=lambda x: x['goals'], reverse=True)
    players = []
    for i in rows_players:
        if i['goals'] != 0:
            players.append(types.InlineKeyboardButton(text=str(i['name']), callback_data=str(i['name'])))
    tverd = types.InlineKeyboardButton(text='–¢–≤–µ—Ä–¥–æ—Ö–ª–µ–± –ì–ª–µ–±', callback_data='tverd')
    main = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
    for i in players:
        players_markup.add(i)
    players_markup.add(main)
    return players_markup


# message handlers

@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–æ—á–µ–∫, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=main_markup)

@dp.message_handler()
async def echo_message(message: types.Message):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    rows_names = []
    for i in range(1,48):
        rows_names.append(await db_connect.fetchrow('select name from player where id = $1', i))
    rows_names = list(set(rows_names))
    # rows_names.sort(key=lambda x: x['name'], reverse=True)
    for i in rows_names:
        input = i['name']
        if message.text == input:
            rows = await db_connect.fetchrow('SELECT player.name, COUNT(goal.player_id) as goals'+
                ' FROM player'+
                ' LEFT JOIN goal ON player.id = goal.player_id where player.name = $1'+
                ' GROUP BY player.name'+
                ' ORDER BY goals DESC', input)
            rows_assist = await db_connect.fetchrow(
                'SELECT player.name, COUNT(assist.player_id) as assists'+
                ' FROM player'+
                ' LEFT JOIN assist ON player.id = assist.player_id where player.name = $1'+
                ' GROUP BY player.name'+
                ' ORDER BY assists DESC', input)
            final = '–ò–º—è: ' + rows_assist['name'] + '\n–ì–æ–ª–æ–≤: ' + str(rows['goals']) + ',\n–ê—Å—Å–∏—Å—Ç–æ–≤: ' + str(rows_assist['assists']) + '.\n'
            await message.answer(final, reply_markup=await get_players())
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer('–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=main_markup)
    elif message.text == '–°–µ–∑–æ–Ω—ã':
        await message.answer('–í—ã–±–∏—Ä–∞–π —Å–µ–∑–æ–Ω.', reply_markup=seasons_markup)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å–µ–∑–æ–Ω–æ–≤':
        await message.answer('–í—ã–±–∏—Ä–∞–π —Å–µ–∑–æ–Ω.', reply_markup=seasons_markup)
    elif message.text == '–®–ü–õ16':
        await message.answer('–®–ü–õ16.\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=set_season('shpl16_champ', 'shpl16_cup', 'shpl16_top'))
    elif message.text == '–®–ü–õ17':
        await message.answer('–®–ü–õ17.\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=set_season('shpl17_champ', 'shpl17_cup', 'shpl17_top'))
    elif message.text == '–®–ü–õ4':
        await message.answer('–®–ü–õ4.\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=set_season('shpl4_champ', 'shpl4_cup', 'shpl4_top'))
    elif message.text == '–ë–•–®–ü–õ':
        await message.answer('–ë–•–®–ü–õ.\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=set_season('bhshpl_champ', 'bhshpl_cup', 'bhshpl_top'))
    elif message.text == '–ë–•–®–ü–õ1':
        await message.answer('–ë–•–®–ü–õ1.\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=set_season('bhshpl1_champ', 'bhshpl11_cup', 'bhshpl1_top'))
    elif message.text == '–ò–≥—Ä–æ–∫–∏':
        await message.answer('–í—ã–±–∏—Ä–∞–π —Å–≤–æ–µ–≥–æ –∫—É–º–∏—Ä–∞ –∏ —Å–º–æ—Ç—Ä–∏ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.', reply_markup=await get_players())
    elif message.text == '–ö–∞—Ä—Ç–æ—á–∫–∏':
        await message.answer('–í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.', reply_markup=main_markup)
    elif  message.text == '–ò–≥—Ä—ã':
        await message.answer('–ò–≥—Ä—ã –ø–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∂–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –±—Ä–∞—Ç–∏—à–∫–∞.', reply_markup=main_markup)
    elif message.text == '–°—Ç–∏–∫–µ—Ä—ã':
        await message.answer('–°—Ç–∏–∫–µ—Ä—ã –ø–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∂–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –±—Ä–∞—Ç–∏—à–∫–∞.', reply_markup=main_markup)
    # else:
    #     await message.answer('–Ø –∑—Ä—è –∫–Ω–æ–ø–∫–∏ –¥–µ–ª–∞–ª?', reply_markup=main_markup)


# callbacks

@dp.callback_query_handler(text='main')
async def main_menu(call: types.CallbackQuery):
    await call.message.answer('–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=main_markup)

@dp.callback_query_handler(text='shpl16_champ')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(1,4):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'champ\' and game.draw = $2 where team.id = $1 and team.cup_id = $3'+
            ' GROUP BY team.name ORDER BY victories DESC', i, 0, 1)
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'champ\'  and game.draw = $2 where team.id = $1 and team.cup_id = $3'+
            ' GROUP BY team.name ORDER BY draws DESC', i, 1, 1)
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'champ\' and game.draw = $2 where team.id = $1 and team.cup_id = $3'+
            ' GROUP BY team.name ORDER BY losses DESC', i, 0, 1)
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ß–ï–ú–ü–ò–û–ù–ê–¢\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl16_cup')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(1,4):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY victories DESC', i, 0)
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'cup\'  and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY draws DESC', i, 1)
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY losses ', i, 0,)
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
        print([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ö–£–ë–û–ö\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl16_top')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    rows = []
    for i in range(1,7):
        rows.append(await db_connect.fetchrow('SELECT player.name, COUNT(goal.player_id) as goals'+
        ' FROM player'+
        ' LEFT JOIN goal ON player.id = goal.player_id and player.id = $1'+
        ' GROUP BY player.name'+
        ' ORDER BY goals DESC', i))
    rows.sort(key=lambda x: x['goals'], reverse=True)
    final = '–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n'
    for i in rows:
        final += i['name'] + ' \n–ì–æ–ª–æ–≤: ' + str(i['goals']) + '.\n\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl17_champ')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(4,7):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'champ\' and game.draw = $2 and team.id = $1'+
            ' GROUP BY team.name ORDER BY victories DESC', i, 0)
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'champ\'  and game.draw = $2 and team.id = $1'+
            ' GROUP BY team.name ORDER BY draws DESC', i, 1)
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'champ\' and game.draw = $2 and team.id = $1'+
            ' GROUP BY team.name ORDER BY losses DESC', i, 0,)
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ß–ï–ú–ü–ò–û–ù–ê–¢\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl17_cup')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(4,7):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY victories DESC', i, 0)
        print(await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY victories DESC', i, 0))
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'cup\'  and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY draws DESC', i, 1)
        print(await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'cup\'  and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY draws DESC', i, 1))
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY losses DESC', i, 0,)
        print(await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ORDER BY losses DESC', i, 0,))
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ö–£–ë–û–ö\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl17_top')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    rows = []
    rows_assist = []
    for i in range(8,15):
        rows.append(await db_connect.fetchrow('SELECT player.name, COUNT(goal.player_id) as goals'+
            ' FROM player'+
            ' LEFT JOIN goal ON player.id = goal.player_id and player.id = $1'+
            ' GROUP BY player.name'+
            ' ORDER BY goals DESC', i))
        rows_assist.append(await db_connect.fetchrow(
            'SELECT player.name, COUNT(assist.player_id) as assists'+
            ' FROM player'+
            ' LEFT JOIN assist ON player.id = assist.player_id and player.id = $1'+
            ' GROUP BY player.name'+
            ' ORDER BY assists DESC', i))
    print(rows)
    print(rows_assist)
    rows.sort(key=lambda x: x['goals'], reverse=True)
    final = '–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n'
    print(rows)
    for i in rows:
        for j in rows_assist:
            if i['name'] == j['name']:
                final += i['name'] + ' \n–ì–æ–ª–æ–≤: ' + str(i['goals']) + ', –ê—Å—Å–∏—Å—Ç–æ–≤: ' + str(j['assists']) + '.\n\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl4_champ')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(7,11):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'champ\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0)
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'champ\'  and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 1)
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'champ\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0,)
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ß–ï–ú–ü–ò–û–ù–ê–¢\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        if 3*i[1]+1*i[2]+0*i[3] != 0:
            final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl4_cup')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(7,11):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0)
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'cup\'  and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 1)
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0,)
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ö–£–ë–û–ö\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='shpl4_top')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    rows = []
    for i in range(16,26):
        rows.append(await db_connect.fetchrow('SELECT player.name, COUNT(goal.player_id) as goals'+
        ' FROM player'+
        ' LEFT JOIN goal ON player.id = goal.player_id and player.id = $1'+
        ' GROUP BY player.name'+
        ' ORDER BY goals DESC', i))
    rows_assist = []
    for i in range(16,26):
        rows_assist.append(await db_connect.fetchrow(
        'SELECT player.name, COUNT(assist.player_id) as assists'+
        ' FROM player'+
        ' LEFT JOIN assist ON player.id = assist.player_id and player.id = $1'+
        ' GROUP BY player.name'+
        ' ORDER BY assists DESC', i))
    print(rows)
    print(rows_assist)
    rows.sort(key=lambda x: x['goals'], reverse=True)
    final = '–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n'
    print(rows)
    for i in rows:
        for j in rows_assist:
            if i['name'] == j['name'] and i['goals'] != 0 and j['assists'] != 0:
                final += i['name'] + ' \n–ì–æ–ª–æ–≤: ' + str(i['goals']) + ', –ê—Å—Å–∏—Å—Ç–æ–≤: ' + str(j['assists']) + '.\n\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='bhshpl_champ')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(11,18):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'champ\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0)
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'champ\'  and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 1)
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'champ\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0,)
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ß–ï–ú–ü–ò–û–ù–ê–¢\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='bhshpl_cup')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    teams = []
    for i in range(11,18):
        v = await db_connect.fetchrow('SELECT team.name, COUNT(game.team1_status) as victories FROM team'+
            ' LEFT JOIN game ON team.id = game.team1_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0)
        d = await db_connect.fetchrow('SELECT team.name, COUNT(game.draw) as draws FROM team'+
            ' LEFT JOIN game ON (team.id = game.team1_id or team.id = game.team2_id) and game.specific = \'cup\'  and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 1)
        l = await db_connect.fetchrow('SELECT team.name, COUNT(game.team2_status) as losses FROM team'+
            ' LEFT JOIN game ON team.id = game.team2_id and game.specific = \'cup\' and game.draw = $2 where team.id = $1'+
            ' GROUP BY team.name ', i, 0,)
        teams.append([v['name'], v['victories'], d['draws'], l['losses']])
    teams.sort(key=lambda row: 3*row[1] + 1*row[2] + 0*row[3], reverse=True)
    print(teams)
    final = '–ö–£–ë–û–ö\n\n–ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n' + teams[0][0].upper() + 'üèÜ\n\n–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥:\n\n'
    for i in teams:
        final += i[0] + ':\n–í: ' + str(i[1]) + ', –ù: ' + str(i[2]) + ', –ü: ' + str(i[3]) + ', –û: ' + str(3*i[1]+1*i[2]+0*i[3]) + '.\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='bhshpl_top')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    rows = []
    for i in range(27,46):
        rows.append(await db_connect.fetchrow('SELECT player.name, COUNT(goal.player_id) as goals'+
        ' FROM player'+
        ' LEFT JOIN goal ON player.id = goal.player_id and player.id = $1'+
        ' GROUP BY player.name'+
        ' ORDER BY goals DESC', i))
    rows_assist = []
    for i in range(27,46):
        rows_assist.append(await db_connect.fetchrow(
        'SELECT player.name, COUNT(assist.player_id) as assists'+
        ' FROM player'+
        ' LEFT JOIN assist ON player.id = assist.player_id and player.id = $1'+
        ' GROUP BY player.name'+
        ' ORDER BY assists DESC', i))
    rows.sort(key=lambda x: x['goals'], reverse=True)
    final = '–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n'
    for i in rows:
        for j in rows_assist:
            if i['name'] == j['name'] and i['goals'] != 0 and j['assists'] != 0:
                final += i['name'] + ' \n–ì–æ–ª–æ–≤: ' + str(i['goals']) + ', –ê—Å—Å–∏—Å—Ç–æ–≤: ' + str(j['assists']) + '.\n\n'
    await call.message.answer(final, reply_markup=seasons_markup)

@dp.callback_query_handler(text='bhshpl1_champ')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    rows = await db_connect.fetchrow('SELECT name FROM player')
    print(await db_connect.fetchrow('SELECT name FROM player'))
    # for i in lst:
    #     rows.append(await db_connect.fetchrow('SELECT name FROM player'))
    str = ''
    # for i in rows:
    str +=  rows['name'] + '\n'
    await call.message.answer(str, reply_markup=seasons_markup)

@dp.callback_query_handler(text='bhshpl1_cup')
async def main_menu(call: types.CallbackQuery):
    db_connect = await asyncpg.connect(user=USER, password=PASSWORD, database=DB, host=HOST)
    rows = await db_connect.fetchrow('SELECT name FROM player')
    print(await db_connect.fetchrow('SELECT name FROM player'))
    # for i in lst:
    #     rows.append(await db_connect.fetchrow('SELECT name FROM player'))
    str = ''
    # for i in rows:
    str +=  rows['name'] + '\n'
    await call.message.answer(str, reply_markup=seasons_markup)


# polling

if __name__ == '__main__':
   executor.start_polling(dp, skip_updates=True)